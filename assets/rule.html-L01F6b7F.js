import{_ as r,e as p,g as n,f as o,h as i,i as e,j as t,r as u,o as d}from"./app-B_YPxGo4.js";const a={},m={class:"hint-container caution"};function g(k,l){const s=u("RouteLink");return d(),p("div",null,[l[189]||(l[189]=n("h1",{id:"nonebot-rule",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nonebot-rule"},[n("span",null,"nonebot.rule")])],-1)),n("p",null,[l[1]||(l[1]=i("本模块是 ")),e(s,{to:"/version-2.4.1/api/matcher.html#Matcher-rule"},{default:t(()=>l[0]||(l[0]=[i("Matcher.rule")])),_:1}),l[2]||(l[2]=i(" 的类型定义。"))]),n("p",null,[l[4]||(l[4]=i("每个")),e(s,{to:"/version-2.4.1/api/matcher.html#Matcher"},{default:t(()=>l[3]||(l[3]=[i("事件响应器")])),_:1}),l[5]||(l[5]=i("拥有一个")),l[6]||(l[6]=n("br",null,null,-1)),l[7]||(l[7]=n("a",{href:"#Rule"},"Rule",-1)),l[8]||(l[8]=i("，其中是 ")),l[9]||(l[9]=n("code",null,"RuleChecker",-1)),l[10]||(l[10]=i(" 的集合。")),l[11]||(l[11]=n("br",null,null,-1)),l[12]||(l[12]=i(" 只有当所有 ")),l[13]||(l[13]=n("code",null,"RuleChecker",-1)),l[14]||(l[14]=i(" 检查结果为 ")),l[15]||(l[15]=n("code",null,"True",-1)),l[16]||(l[16]=i(" 时继续运行。"))]),l[190]||(l[190]=n("h2",{id:"Rule",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#Rule"},[n("span",null,[n("em",null,"class"),i(),n("code",null,"Rule(*checkers)")])])],-1)),n("ul",null,[n("li",null,[l[20]||(l[20]=n("p",null,[n("strong",null,"说明")],-1)),l[21]||(l[21]=n("p",null,"规则类。",-1)),n("p",null,[l[18]||(l[18]=i("当事件传递时，在 ")),e(s,{to:"/version-2.4.1/api/matcher.html#Matcher"},{default:t(()=>l[17]||(l[17]=[i("Matcher")])),_:1}),l[19]||(l[19]=i(" 运行前进行检查。"))])]),n("li",null,[l[28]||(l[28]=n("p",null,[n("strong",null,"参数")],-1)),n("ul",null,[n("li",null,[l[24]||(l[24]=n("code",null,"*checkers",-1)),l[25]||(l[25]=i(" (")),e(s,{to:"/version-2.4.1/api/typing.html#T-RuleChecker"},{default:t(()=>l[22]||(l[22]=[i("T_RuleChecker")])),_:1}),l[26]||(l[26]=i(" | ")),e(s,{to:"/version-2.4.1/api/dependencies/#Dependent"},{default:t(()=>l[23]||(l[23]=[i("Dependent")])),_:1}),l[27]||(l[27]=i("[bool]): RuleChecker"))])])]),l[29]||(l[29]=o(`<li><p><strong>用法</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Rule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(async_function) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sync_function</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 等价于</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Rule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(async_function, sync_function)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1))]),l[191]||(l[191]=n("h3",{id:"Rule-checkers",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#Rule-checkers"},[n("span",null,[n("em",null,"instance-var"),i(),n("code",null,"checkers")])])],-1)),n("ul",null,[n("li",null,[n("p",null,[l[31]||(l[31]=n("strong",null,"类型:",-1)),l[32]||(l[32]=i(" set[")),e(s,{to:"/version-2.4.1/api/dependencies/#Dependent"},{default:t(()=>l[30]||(l[30]=[i("Dependent")])),_:1}),l[33]||(l[33]=i("[bool]]"))])]),l[34]||(l[34]=n("li",null,[n("p",null,[n("strong",null,"说明:"),i(" 存储 "),n("code",null,"RuleChecker")])],-1))]),l[192]||(l[192]=n("h3",{id:"Rule---call--",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#Rule---call--"},[n("span",null,[n("em",null,"async method"),i(),n("code",null,"__call__(bot, event, state, stack=None, dependency_cache=None)")])])],-1)),n("ul",null,[l[53]||(l[53]=n("li",null,[n("p",null,[n("strong",null,"说明:"),i(" 检查是否符合所有规则")])],-1)),n("li",null,[l[52]||(l[52]=n("p",null,[n("strong",null,"参数")],-1)),n("ul",null,[n("li",null,[n("p",null,[l[36]||(l[36]=n("code",null,"bot",-1)),l[37]||(l[37]=i(" (")),e(s,{to:"/version-2.4.1/api/adapters/#Bot"},{default:t(()=>l[35]||(l[35]=[i("Bot")])),_:1}),l[38]||(l[38]=i("): Bot 对象"))])]),n("li",null,[n("p",null,[l[40]||(l[40]=n("code",null,"event",-1)),l[41]||(l[41]=i(" (")),e(s,{to:"/version-2.4.1/api/adapters/#Event"},{default:t(()=>l[39]||(l[39]=[i("Event")])),_:1}),l[42]||(l[42]=i("): Event 对象"))])]),n("li",null,[n("p",null,[l[44]||(l[44]=n("code",null,"state",-1)),l[45]||(l[45]=i(" (")),e(s,{to:"/version-2.4.1/api/typing.html#T-State"},{default:t(()=>l[43]||(l[43]=[i("T_State")])),_:1}),l[46]||(l[46]=i("): 当前 State"))])]),l[51]||(l[51]=n("li",null,[n("p",null,[n("code",null,"stack"),i(" (AsyncExitStack | None): 异步上下文栈")])],-1)),n("li",null,[n("p",null,[l[48]||(l[48]=n("code",null,"dependency_cache",-1)),l[49]||(l[49]=i(" (")),e(s,{to:"/version-2.4.1/api/typing.html#T-DependencyCache"},{default:t(()=>l[47]||(l[47]=[i("T_DependencyCache")])),_:1}),l[50]||(l[50]=i(" | None): 依赖缓存"))])])])]),l[54]||(l[54]=n("li",null,[n("p",null,[n("strong",null,"返回")]),n("ul",null,[n("li",null,"bool")])],-1))]),l[193]||(l[193]=o('<h2 id="CMD-RESULT" tabindex="-1"><a class="header-anchor" href="#CMD-RESULT"><span><em>class</em> <code>CMD_RESULT(&lt;auto&gt;)</code></span></a></h2><ul><li><p><strong>参数</strong></p><p>auto</p></li></ul><h2 id="TRIE-VALUE" tabindex="-1"><a class="header-anchor" href="#TRIE-VALUE"><span><em>class</em> <code>TRIE_VALUE(&lt;auto&gt;)</code></span></a></h2><ul><li><p><strong>说明:</strong> TRIE_VALUE(command_start, command)</p></li><li><p><strong>参数</strong></p><p>auto</p></li></ul><h2 id="StartswithRule" tabindex="-1"><a class="header-anchor" href="#StartswithRule"><span><em>class</em> <code>StartswithRule(msg, ignorecase=False)</code></span></a></h2><ul><li><p><strong>说明:</strong> 检查消息纯文本是否以指定字符串开头。</p></li><li><p><strong>参数</strong></p><ul><li><p><code>msg</code> (tuple[str, ...]): 指定消息开头字符串元组</p></li><li><p><code>ignorecase</code> (bool): 是否忽略大小写</p></li></ul></li></ul><h2 id="startswith" tabindex="-1"><a class="header-anchor" href="#startswith"><span><em>def</em> <code>startswith(msg, ignorecase=False)</code></span></a></h2><ul><li><p><strong>说明:</strong> 匹配消息纯文本开头。</p></li><li><p><strong>参数</strong></p><ul><li><p><code>msg</code> (str | tuple[str, ...]): 指定消息开头字符串元组</p></li><li><p><code>ignorecase</code> (bool): 是否忽略大小写</p></li></ul></li><li><p><strong>返回</strong></p><ul><li><a href="#Rule">Rule</a></li></ul></li></ul><h2 id="EndswithRule" tabindex="-1"><a class="header-anchor" href="#EndswithRule"><span><em>class</em> <code>EndswithRule(msg, ignorecase=False)</code></span></a></h2><ul><li><p><strong>说明:</strong> 检查消息纯文本是否以指定字符串结尾。</p></li><li><p><strong>参数</strong></p><ul><li><p><code>msg</code> (tuple[str, ...]): 指定消息结尾字符串元组</p></li><li><p><code>ignorecase</code> (bool): 是否忽略大小写</p></li></ul></li></ul><h2 id="endswith" tabindex="-1"><a class="header-anchor" href="#endswith"><span><em>def</em> <code>endswith(msg, ignorecase=False)</code></span></a></h2><ul><li><p><strong>说明:</strong> 匹配消息纯文本结尾。</p></li><li><p><strong>参数</strong></p><ul><li><p><code>msg</code> (str | tuple[str, ...]): 指定消息开头字符串元组</p></li><li><p><code>ignorecase</code> (bool): 是否忽略大小写</p></li></ul></li><li><p><strong>返回</strong></p><ul><li><a href="#Rule">Rule</a></li></ul></li></ul><h2 id="FullmatchRule" tabindex="-1"><a class="header-anchor" href="#FullmatchRule"><span><em>class</em> <code>FullmatchRule(msg, ignorecase=False)</code></span></a></h2><ul><li><p><strong>说明:</strong> 检查消息纯文本是否与指定字符串全匹配。</p></li><li><p><strong>参数</strong></p><ul><li><p><code>msg</code> (tuple[str, ...]): 指定消息全匹配字符串元组</p></li><li><p><code>ignorecase</code> (bool): 是否忽略大小写</p></li></ul></li></ul><h2 id="fullmatch" tabindex="-1"><a class="header-anchor" href="#fullmatch"><span><em>def</em> <code>fullmatch(msg, ignorecase=False)</code></span></a></h2><ul><li><p><strong>说明:</strong> 完全匹配消息。</p></li><li><p><strong>参数</strong></p><ul><li><p><code>msg</code> (str | tuple[str, ...]): 指定消息全匹配字符串元组</p></li><li><p><code>ignorecase</code> (bool): 是否忽略大小写</p></li></ul></li><li><p><strong>返回</strong></p><ul><li><a href="#Rule">Rule</a></li></ul></li></ul><h2 id="KeywordsRule" tabindex="-1"><a class="header-anchor" href="#KeywordsRule"><span><em>class</em> <code>KeywordsRule(*keywords)</code></span></a></h2><ul><li><p><strong>说明:</strong> 检查消息纯文本是否包含指定关键字。</p></li><li><p><strong>参数</strong></p><ul><li><code>*keywords</code> (str): 指定关键字元组</li></ul></li></ul><h2 id="keyword" tabindex="-1"><a class="header-anchor" href="#keyword"><span><em>def</em> <code>keyword(*keywords)</code></span></a></h2><ul><li><p><strong>说明:</strong> 匹配消息纯文本关键词。</p></li><li><p><strong>参数</strong></p><ul><li><code>*keywords</code> (str): 指定关键字元组</li></ul></li><li><p><strong>返回</strong></p><ul><li><a href="#Rule">Rule</a></li></ul></li></ul><h2 id="CommandRule" tabindex="-1"><a class="header-anchor" href="#CommandRule"><span><em>class</em> <code>CommandRule(cmds, force_whitespace=None)</code></span></a></h2><ul><li><p><strong>说明:</strong> 检查消息是否为指定命令。</p></li><li><p><strong>参数</strong></p><ul><li><p><code>cmds</code> (list[tuple[str, ...]]): 指定命令元组列表</p></li><li><p><code>force_whitespace</code> (str | bool | None): 是否强制命令后必须有指定空白符</p></li></ul></li></ul><h2 id="command" tabindex="-1"><a class="header-anchor" href="#command"><span><em>def</em> <code>command(*cmds, force_whitespace=None)</code></span></a></h2>',23)),n("ul",null,[n("li",null,[l[76]||(l[76]=n("p",null,[n("strong",null,"说明")],-1)),l[77]||(l[77]=n("p",null,"匹配消息命令。",-1)),n("p",null,[l[57]||(l[57]=i("根据配置里提供的 ")),e(s,{to:"/version-2.4.1/api/config.html#Config-command-start"},{default:t(()=>l[55]||(l[55]=[n("code",null,"command_start",-1)])),_:1}),l[58]||(l[58]=i(",")),l[59]||(l[59]=n("br",null,null,-1)),e(s,{to:"/version-2.4.1/api/config.html#Config-command-sep"},{default:t(()=>l[56]||(l[56]=[n("code",null,"command_sep",-1)])),_:1}),l[60]||(l[60]=i(" 判断消息是否为命令。"))]),n("p",null,[l[64]||(l[64]=i("可以通过 ")),e(s,{to:"/version-2.4.1/api/params.html#Command"},{default:t(()=>l[61]||(l[61]=[i("Command")])),_:1}),l[65]||(l[65]=i(" 获取匹配成功的命令（例: ")),l[66]||(l[66]=n("code",null,'("test",)',-1)),l[67]||(l[67]=i("），")),l[68]||(l[68]=n("br",null,null,-1)),l[69]||(l[69]=i(" 通过 ")),e(s,{to:"/version-2.4.1/api/params.html#RawCommand"},{default:t(()=>l[62]||(l[62]=[i("RawCommand")])),_:1}),l[70]||(l[70]=i(" 获取匹配成功的原始命令文本（例: ")),l[71]||(l[71]=n("code",null,'"/test"',-1)),l[72]||(l[72]=i("），")),l[73]||(l[73]=n("br",null,null,-1)),l[74]||(l[74]=i(" 通过 ")),e(s,{to:"/version-2.4.1/api/params.html#CommandArg"},{default:t(()=>l[63]||(l[63]=[i("CommandArg")])),_:1}),l[75]||(l[75]=i(" 获取匹配成功的命令参数。"))])]),l[78]||(l[78]=o('<li><p><strong>参数</strong></p><ul><li><p><code>*cmds</code> (str | tuple[str, ...]): 命令文本或命令元组</p></li><li><p><code>force_whitespace</code> (str | bool | None): 是否强制命令后必须有指定空白符</p></li></ul></li><li><p><strong>返回</strong></p><ul><li><a href="#Rule">Rule</a></li></ul></li><li><p><strong>用法</strong></p><p>使用默认 <code>command_start</code>, <code>command_sep</code> 配置情况下：</p><p>命令 <code>(&quot;test&quot;,)</code> 可以匹配: <code>/test</code> 开头的消息<br> 命令 <code>(&quot;test&quot;, &quot;sub&quot;)</code> 可以匹配: <code>/test.sub</code> 开头的消息</p></li>',3))]),l[194]||(l[194]=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"提示"),n("p",null,"命令内容与后续消息间无需空格!")],-1)),l[195]||(l[195]=n("h2",{id:"ArgumentParser",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ArgumentParser"},[n("span",null,[n("em",null,"class"),i(),n("code",null,"ArgumentParser(<auto>)")])])],-1)),n("ul",null,[n("li",null,[l[82]||(l[82]=n("p",null,[n("strong",null,"说明")],-1)),l[83]||(l[83]=n("p",null,[n("code",null,"shell_like"),i(" 命令参数解析器，解析出错时不会退出程序。")],-1)),n("p",null,[l[80]||(l[80]=i("支持 ")),e(s,{to:"/version-2.4.1/api/adapters/#Message"},{default:t(()=>l[79]||(l[79]=[i("Message")])),_:1}),l[81]||(l[81]=i(" 富文本解析。"))])]),l[84]||(l[84]=n("li",null,[n("p",null,[n("strong",null,"参数")]),n("p",null,"auto")],-1)),l[85]||(l[85]=n("li",null,[n("p",null,[n("strong",null,"用法")]),n("p",null,[i("用法与 "),n("code",null,"argparse.ArgumentParser"),i(" 相同，"),n("br"),i(" 参考文档: "),n("a",{href:"https://docs.python.org/3/library/argparse.html",target:"_blank",rel:"noopener noreferrer"},"argparse")])],-1))]),l[196]||(l[196]=n("h3",{id:"ArgumentParser-parse-known-args",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ArgumentParser-parse-known-args"},[n("span",null,[n("em",null,"method"),i(),n("code",null,"parse_known_args(args=None, namespace=None)")])])],-1)),n("ul",null,[n("li",null,[l[111]||(l[111]=n("p",null,[n("strong",null,"重载")],-1)),l[112]||(l[112]=n("p",null,[n("strong",null,"1."),i(),n("code",null,"(args=None, namespace=None) -> tuple[Namespace, list[str | MessageSegment]]")],-1)),n("ul",null,[n("li",null,[l[91]||(l[91]=n("p",null,[n("strong",null,"参数")],-1)),n("ul",null,[n("li",null,[n("p",null,[l[87]||(l[87]=n("code",null,"args",-1)),l[88]||(l[88]=i(" (Sequence[str | ")),e(s,{to:"/version-2.4.1/api/adapters/#MessageSegment"},{default:t(()=>l[86]||(l[86]=[i("MessageSegment")])),_:1}),l[89]||(l[89]=i("] | None)"))])]),l[90]||(l[90]=n("li",null,[n("p",null,[n("code",null,"namespace"),i(" (None)")])],-1))])]),n("li",null,[l[95]||(l[95]=n("p",null,[n("strong",null,"返回")],-1)),n("ul",null,[n("li",null,[l[93]||(l[93]=i("tuple[Namespace, list[str | ")),e(s,{to:"/version-2.4.1/api/adapters/#MessageSegment"},{default:t(()=>l[92]||(l[92]=[i("MessageSegment")])),_:1}),l[94]||(l[94]=i("]]"))])])])]),l[113]||(l[113]=n("p",null,[n("strong",null,"2."),i(),n("code",null,"(args, namespace) -> tuple[T, list[str | MessageSegment]]")],-1)),n("ul",null,[n("li",null,[l[101]||(l[101]=n("p",null,[n("strong",null,"参数")],-1)),n("ul",null,[n("li",null,[n("p",null,[l[97]||(l[97]=n("code",null,"args",-1)),l[98]||(l[98]=i(" (Sequence[str | ")),e(s,{to:"/version-2.4.1/api/adapters/#MessageSegment"},{default:t(()=>l[96]||(l[96]=[i("MessageSegment")])),_:1}),l[99]||(l[99]=i("] | None)"))])]),l[100]||(l[100]=n("li",null,[n("p",null,[n("code",null,"namespace"),i(" (T)")])],-1))])]),n("li",null,[l[105]||(l[105]=n("p",null,[n("strong",null,"返回")],-1)),n("ul",null,[n("li",null,[l[103]||(l[103]=i("tuple[T, list[str | ")),e(s,{to:"/version-2.4.1/api/adapters/#MessageSegment"},{default:t(()=>l[102]||(l[102]=[i("MessageSegment")])),_:1}),l[104]||(l[104]=i("]]"))])])])]),l[114]||(l[114]=n("p",null,[n("strong",null,"3."),i(),n("code",null,"(*, namespace) -> tuple[T, list[str | MessageSegment]]")],-1)),n("ul",null,[l[110]||(l[110]=n("li",null,[n("p",null,[n("strong",null,"参数")]),n("ul",null,[n("li",null,[n("code",null,"namespace"),i(" (T)")])])],-1)),n("li",null,[l[109]||(l[109]=n("p",null,[n("strong",null,"返回")],-1)),n("ul",null,[n("li",null,[l[107]||(l[107]=i("tuple[T, list[str | ")),e(s,{to:"/version-2.4.1/api/adapters/#MessageSegment"},{default:t(()=>l[106]||(l[106]=[i("MessageSegment")])),_:1}),l[108]||(l[108]=i("]]"))])])])])])]),l[197]||(l[197]=o('<h2 id="ShellCommandRule" tabindex="-1"><a class="header-anchor" href="#ShellCommandRule"><span><em>class</em> <code>ShellCommandRule(cmds, parser)</code></span></a></h2><ul><li><p><strong>说明:</strong> 检查消息是否为指定 shell 命令。</p></li><li><p><strong>参数</strong></p><ul><li><p><code>cmds</code> (list[tuple[str, ...]]): 指定命令元组列表</p></li><li><p><code>parser</code> (ArgumentParser | None): 可选参数解析器</p></li></ul></li></ul><h2 id="shell-command" tabindex="-1"><a class="header-anchor" href="#shell-command"><span><em>def</em> <code>shell_command(*cmds, parser=None)</code></span></a></h2>',3)),n("ul",null,[n("li",null,[l[159]||(l[159]=n("p",null,[n("strong",null,"说明")],-1)),l[160]||(l[160]=n("p",null,[i("匹配 "),n("code",null,"shell_like"),i(" 形式的消息命令。")],-1)),n("p",null,[l[117]||(l[117]=i("根据配置里提供的 ")),e(s,{to:"/version-2.4.1/api/config.html#Config-command-start"},{default:t(()=>l[115]||(l[115]=[n("code",null,"command_start",-1)])),_:1}),l[118]||(l[118]=i(",")),l[119]||(l[119]=n("br",null,null,-1)),e(s,{to:"/version-2.4.1/api/config.html#Config-command-sep"},{default:t(()=>l[116]||(l[116]=[n("code",null,"command_sep",-1)])),_:1}),l[120]||(l[120]=i(" 判断消息是否为命令。"))]),n("p",null,[l[125]||(l[125]=i("可以通过 ")),e(s,{to:"/version-2.4.1/api/params.html#Command"},{default:t(()=>l[121]||(l[121]=[i("Command")])),_:1}),l[126]||(l[126]=i(" 获取匹配成功的命令")),l[127]||(l[127]=n("br",null,null,-1)),l[128]||(l[128]=i(" （例: ")),l[129]||(l[129]=n("code",null,'("test",)',-1)),l[130]||(l[130]=i("），")),l[131]||(l[131]=n("br",null,null,-1)),l[132]||(l[132]=i(" 通过 ")),e(s,{to:"/version-2.4.1/api/params.html#RawCommand"},{default:t(()=>l[122]||(l[122]=[i("RawCommand")])),_:1}),l[133]||(l[133]=i(" 获取匹配成功的原始命令文本")),l[134]||(l[134]=n("br",null,null,-1)),l[135]||(l[135]=i(" （例: ")),l[136]||(l[136]=n("code",null,'"/test"',-1)),l[137]||(l[137]=i("），")),l[138]||(l[138]=n("br",null,null,-1)),l[139]||(l[139]=i(" 通过 ")),e(s,{to:"/version-2.4.1/api/params.html#ShellCommandArgv"},{default:t(()=>l[123]||(l[123]=[i("ShellCommandArgv")])),_:1}),l[140]||(l[140]=i(" 获取解析前的参数列表")),l[141]||(l[141]=n("br",null,null,-1)),l[142]||(l[142]=i(" （例: ")),l[143]||(l[143]=n("code",null,'["arg", "-h"]',-1)),l[144]||(l[144]=i("），")),l[145]||(l[145]=n("br",null,null,-1)),l[146]||(l[146]=i(" 通过 ")),e(s,{to:"/version-2.4.1/api/params.html#ShellCommandArgs"},{default:t(()=>l[124]||(l[124]=[i("ShellCommandArgs")])),_:1}),l[147]||(l[147]=i(" 获取解析后的参数字典")),l[148]||(l[148]=n("br",null,null,-1)),l[149]||(l[149]=i(" （例: ")),l[150]||(l[150]=n("code",null,'{"arg": "arg", "h": True}',-1)),l[151]||(l[151]=i("）。"))]),n("div",m,[l[158]||(l[158]=n("p",{class:"hint-container-title"},"警告",-1)),n("p",null,[l[154]||(l[154]=i("如果参数解析失败，则通过 ")),e(s,{to:"/version-2.4.1/api/params.html#ShellCommandArgs"},{default:t(()=>l[152]||(l[152]=[i("ShellCommandArgs")])),_:1}),l[155]||(l[155]=n("br",null,null,-1)),l[156]||(l[156]=i(" 获取的将是 ")),e(s,{to:"/version-2.4.1/api/exception.html#ParserExit"},{default:t(()=>l[153]||(l[153]=[i("ParserExit")])),_:1}),l[157]||(l[157]=i(" 异常。"))])])]),l[161]||(l[161]=o(`<li><p><strong>参数</strong></p><ul><li><p><code>*cmds</code> (str | tuple[str, ...]): 命令文本或命令元组</p></li><li><p><code>parser</code> (ArgumentParser | None): <a href="#ArgumentParser">ArgumentParser</a> 对象</p></li></ul></li><li><p><strong>返回</strong></p><ul><li><a href="#Rule">Rule</a></li></ul></li><li><p><strong>用法</strong></p><p>使用默认 <code>command_start</code>, <code>command_sep</code> 配置，更多示例参考<br><a href="https://docs.python.org/3/library/argparse.html" target="_blank" rel="noopener noreferrer">argparse</a> 标准库文档。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nonebot.rule </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ArgumentParser</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">parser </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> ArgumentParser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">parser.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">add_argument</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">action</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;store_true&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rule </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> shell_command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ls&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">parser</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">parser)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3))]),l[198]||(l[198]=o('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>命令内容与后续消息间无需空格!</p></div><h2 id="RegexRule" tabindex="-1"><a class="header-anchor" href="#RegexRule"><span><em>class</em> <code>RegexRule(regex, flags=0)</code></span></a></h2><ul><li><p><strong>说明:</strong> 检查消息字符串是否符合指定正则表达式。</p></li><li><p><strong>参数</strong></p><ul><li><p><code>regex</code> (str): 正则表达式</p></li><li><p><code>flags</code> (int): 正则表达式标记</p></li></ul></li></ul><h2 id="regex" tabindex="-1"><a class="header-anchor" href="#regex"><span><em>def</em> <code>regex(regex, flags=0)</code></span></a></h2>',4)),n("ul",null,[n("li",null,[l[173]||(l[173]=n("p",null,[n("strong",null,"说明")],-1)),l[174]||(l[174]=n("p",null,"匹配符合正则表达式的消息字符串。",-1)),n("p",null,[l[165]||(l[165]=i("可以通过 ")),e(s,{to:"/version-2.4.1/api/params.html#RegexStr"},{default:t(()=>l[162]||(l[162]=[i("RegexStr")])),_:1}),l[166]||(l[166]=i(" 获取匹配成功的字符串，")),l[167]||(l[167]=n("br",null,null,-1)),l[168]||(l[168]=i(" 通过 ")),e(s,{to:"/version-2.4.1/api/params.html#RegexGroup"},{default:t(()=>l[163]||(l[163]=[i("RegexGroup")])),_:1}),l[169]||(l[169]=i(" 获取匹配成功的 group 元组，")),l[170]||(l[170]=n("br",null,null,-1)),l[171]||(l[171]=i(" 通过 ")),e(s,{to:"/version-2.4.1/api/params.html#RegexDict"},{default:t(()=>l[164]||(l[164]=[i("RegexDict")])),_:1}),l[172]||(l[172]=i(" 获取匹配成功的 group 字典。"))])]),l[175]||(l[175]=o('<li><p><strong>参数</strong></p><ul><li><p><code>regex</code> (str): 正则表达式</p></li><li><p><code>flags</code> (int | re.RegexFlag): 正则表达式标记</p></li></ul></li><li><p><strong>返回</strong></p><ul><li><a href="#Rule">Rule</a></li></ul></li>',2))]),l[199]||(l[199]=o('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>正则表达式匹配使用 search 而非 match，如需从头匹配请使用 <code>r&quot;^xxx&quot;</code> 来确保匹配开头</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>正则表达式匹配使用 <code>EventMessage</code> 的 <code>str</code> 字符串，<br> 而非 <code>EventMessage</code> 的 <code>PlainText</code> 纯文本字符串</p></div><h2 id="ToMeRule" tabindex="-1"><a class="header-anchor" href="#ToMeRule"><span><em>class</em> <code>ToMeRule(&lt;auto&gt;)</code></span></a></h2><ul><li><p><strong>说明:</strong> 检查事件是否与机器人有关。</p></li><li><p><strong>参数</strong></p><p>auto</p></li></ul><h2 id="to-me" tabindex="-1"><a class="header-anchor" href="#to-me"><span><em>def</em> <code>to_me()</code></span></a></h2><ul><li><p><strong>说明:</strong> 匹配与机器人有关的事件。</p></li><li><p><strong>参数</strong></p><p>empty</p></li><li><p><strong>返回</strong></p><ul><li><a href="#Rule">Rule</a></li></ul></li></ul><h2 id="IsTypeRule" tabindex="-1"><a class="header-anchor" href="#IsTypeRule"><span><em>class</em> <code>IsTypeRule(*types)</code></span></a></h2>',7)),n("ul",null,[l[181]||(l[181]=n("li",null,[n("p",null,[n("strong",null,"说明:"),i(" 检查事件类型是否为指定类型。")])],-1)),n("li",null,[l[180]||(l[180]=n("p",null,[n("strong",null,"参数")],-1)),n("ul",null,[n("li",null,[l[177]||(l[177]=n("code",null,"*types",-1)),l[178]||(l[178]=i(" (type[")),e(s,{to:"/version-2.4.1/api/adapters/#Event"},{default:t(()=>l[176]||(l[176]=[i("Event")])),_:1}),l[179]||(l[179]=i("])"))])])])]),l[200]||(l[200]=n("h2",{id:"is-type",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#is-type"},[n("span",null,[n("em",null,"def"),i(),n("code",null,"is_type(*types)")])])],-1)),n("ul",null,[l[187]||(l[187]=n("li",null,[n("p",null,[n("strong",null,"说明:"),i(" 匹配事件类型。")])],-1)),n("li",null,[l[186]||(l[186]=n("p",null,[n("strong",null,"参数")],-1)),n("ul",null,[n("li",null,[l[183]||(l[183]=n("code",null,"*types",-1)),l[184]||(l[184]=i(" (type[")),e(s,{to:"/version-2.4.1/api/adapters/#Event"},{default:t(()=>l[182]||(l[182]=[i("Event")])),_:1}),l[185]||(l[185]=i("]): 事件类型"))])])]),l[188]||(l[188]=n("li",null,[n("p",null,[n("strong",null,"返回")]),n("ul",null,[n("li",null,[n("a",{href:"#Rule"},"Rule")])])],-1))])])}const f=r(a,[["render",g],["__file","rule.html.vue"]]),b=JSON.parse('{"path":"/version-2.4.1/api/rule.html","title":"nonebot.rule","lang":"zh-CN","frontmatter":{"mdx":{"format":"md"},"sidebar_position":5,"description":"nonebot.rule 模块","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/nonebot2/version-2.4.1/api/rule.html"}],["meta",{"property":"og:site_name","content":"nonebot2"}],["meta",{"property":"og:title","content":"nonebot.rule"}],["meta",{"property":"og:description","content":"nonebot.rule 模块"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nonebot.rule\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/nonebot2/\\"}]}"]]},"git":{},"readingTime":{"minutes":5.15,"words":1544},"filePathRelative":"version-2.4.1/api/rule.md","excerpt":"\\n<p>本模块是 <a href=\\"/nonebot2/version-2.4.1/api/matcher.html#Matcher-rule\\" target=\\"_blank\\">Matcher.rule</a> 的类型定义。</p>\\n<p>每个<a href=\\"/nonebot2/version-2.4.1/api/matcher.html#Matcher\\" target=\\"_blank\\">事件响应器</a>拥有一个<br>\\n<a href=\\"#Rule\\">Rule</a>，其中是 <code>RuleChecker</code> 的集合。<br>\\n只有当所有 <code>RuleChecker</code> 检查结果为 <code>True</code> 时继续运行。</p>","bioChainData":{"outlink":[{"title":"matcher","link":"version-2.4.1/api/matcher.html"},{"title":"typing","link":"version-2.4.1/api/typing.html"},{"title":"index","link":"version-2.4.1/api/dependencies/index.html"},{"title":"index","link":"version-2.4.1/api/adapters/index.html"},{"title":"config","link":"version-2.4.1/api/config.html"},{"title":"params","link":"version-2.4.1/api/params.html"},{"title":"exception","link":"version-2.4.1/api/exception.html"}],"backlink":[{"title":"matcher","link":"version-2.4.1/api/matcher.html"},{"title":"on","link":"version-2.4.1/api/plugin/on.html"}],"localMap":{"nodes":[{"id":"version-2.4.1/api/rule.md","value":{"title":"rule","path":"version-2.4.1/api/rule.md","outlink":["version-2.4.1/api/matcher.md","version-2.4.1/api/typing.md","version-2.4.1/api/dependencies/index.md","version-2.4.1/api/adapters/index.md","version-2.4.1/api/config.md","version-2.4.1/api/params.md","version-2.4.1/api/exception.md"],"backlink":["version-2.4.1/api/matcher.md","version-2.4.1/api/plugin/on.md"]}},{"id":"version-2.4.1/api/matcher.md","value":{"title":"matcher","path":"version-2.4.1/api/matcher.md","outlink":[],"backlink":[]}},{"id":"version-2.4.1/api/typing.md","value":{"title":"typing","path":"version-2.4.1/api/typing.md","outlink":[],"backlink":[]}},{"id":"version-2.4.1/api/dependencies/index.md","value":{"title":"index","path":"version-2.4.1/api/dependencies/index.md","outlink":[],"backlink":[]}},{"id":"version-2.4.1/api/adapters/index.md","value":{"title":"index","path":"version-2.4.1/api/adapters/index.md","outlink":[],"backlink":[]}},{"id":"version-2.4.1/api/config.md","value":{"title":"config","path":"version-2.4.1/api/config.md","outlink":[],"backlink":[]}},{"id":"version-2.4.1/api/params.md","value":{"title":"params","path":"version-2.4.1/api/params.md","outlink":[],"backlink":[]}},{"id":"version-2.4.1/api/exception.md","value":{"title":"exception","path":"version-2.4.1/api/exception.md","outlink":[],"backlink":[]}},{"id":"version-2.4.1/api/plugin/on.md","value":{"title":"on","path":"version-2.4.1/api/plugin/on.md","outlink":[],"backlink":[]}}],"links":[{"source":"version-2.4.1/api/rule.md","target":"version-2.4.1/api/matcher.md"},{"source":"version-2.4.1/api/rule.md","target":"version-2.4.1/api/typing.md"},{"source":"version-2.4.1/api/rule.md","target":"version-2.4.1/api/dependencies/index.md"},{"source":"version-2.4.1/api/rule.md","target":"version-2.4.1/api/adapters/index.md"},{"source":"version-2.4.1/api/rule.md","target":"version-2.4.1/api/config.md"},{"source":"version-2.4.1/api/rule.md","target":"version-2.4.1/api/params.md"},{"source":"version-2.4.1/api/rule.md","target":"version-2.4.1/api/exception.md"},{"source":"version-2.4.1/api/matcher.md","target":"version-2.4.1/api/rule.md"},{"source":"version-2.4.1/api/plugin/on.md","target":"version-2.4.1/api/rule.md"}]}}}');export{f as comp,b as data};
